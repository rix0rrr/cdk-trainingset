import * as cdk from 'aws-cdk-lib';
import * as backup from 'aws-cdk-lib/aws-backup';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as iam from 'aws-cdk-lib/aws-iam';

export interface CdkBackupSelectionProps extends cdk.StackProps {
  /**
   * Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
   * @default '/cdk-bootstrap/hnb659fds/version'
   */
  readonly bootstrapVersion?: string;
}

export class CdkBackupSelection extends cdk.Stack {
  public constructor(scope: cdk.App, id: string, props: CdkBackupSelectionProps = {}) {
    super(scope, id, props);

    // Applying default props
    props = {
      ...props,
      bootstrapVersion: new cdk.CfnParameter(this, 'BootstrapVersion', {
        type: 'AWS::SSM::Parameter::Value<String>',
        default: props.bootstrapVersion?.toString() ?? '/cdk-bootstrap/hnb659fds/version',
        description: 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
      }).valueAsString,
    };

    // Resources
    const backupRoleF43cfd90 = new iam.CfnRole(this, 'BackupRoleF43CFD90', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'backup.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
      managedPolicyArns: [
        [
          'arn:',
          this.partition,
          ':iam::aws:policy/AWSBackupServiceRolePolicyForS3Backup',
        ].join(''),
        [
          'arn:',
          this.partition,
          ':iam::aws:policy/AWSBackupServiceRolePolicyForS3Restore',
        ].join(''),
      ],
    });

    const firstPlanSelectionWithAutoGeneratedPolicyRoleFbe2aac4 = new iam.CfnRole(this, 'FirstPlanSelectionWithAutoGeneratedPolicyRoleFBE2AAC4', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'backup.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
      managedPolicyArns: [
        [
          'arn:',
          this.partition,
          ':iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup',
        ].join(''),
        [
          'arn:',
          this.partition,
          ':iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores',
        ].join(''),
      ],
    });

    const firstVault1F616cc6 = new backup.CfnBackupVault(this, 'FirstVault1F616CC6', {
      backupVaultName: 'cdkbackupselectionFirstVault835CDB1C',
      lockConfiguration: {
        minRetentionDays: 5,
      },
    });
    firstVault1F616cc6.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const secondVaultFafc72cb = new backup.CfnBackupVault(this, 'SecondVaultFAFC72CB', {
      backupVaultName: 'cdkbackupselectionSecondVault1F4AA8E1',
      lockConfiguration: {
        minRetentionDays: 5,
      },
    });
    secondVaultFafc72cb.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const tableCd117fa1 = new dynamodb.CfnTable(this, 'TableCD117FA1', {
      attributeDefinitions: [
        {
          attributeName: 'id',
          attributeType: 'S',
        },
      ],
      keySchema: [
        {
          attributeName: 'id',
          keyType: 'HASH',
        },
      ],
      provisionedThroughput: {
        readCapacityUnits: 5,
        writeCapacityUnits: 5,
      },
    });
    tableCd117fa1.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    if (firstVault1F616cc6 == null) { throw new Error(`A combination of conditions caused 'firstVault1F616cc6' to be undefined. Fixit.`); }
    const firstPlanF748325d = new backup.CfnBackupPlan(this, 'FirstPlanF748325D', {
      backupPlan: {
        backupPlanName: 'FirstPlan',
        backupPlanRule: [
          {
            lifecycle: {
              deleteAfterDays: 35,
            },
            ruleName: 'Daily',
            scheduleExpression: 'cron(0 5 * * ? *)',
            targetBackupVault: firstVault1F616cc6.attrBackupVaultName,
          },
          {
            lifecycle: {
              deleteAfterDays: 90,
            },
            ruleName: 'Weekly',
            scheduleExpression: 'cron(0 5 ? * SAT *)',
            targetBackupVault: firstVault1F616cc6.attrBackupVaultName,
          },
          {
            lifecycle: {
              deleteAfterDays: 1825,
              moveToColdStorageAfterDays: 90,
            },
            ruleName: 'Monthly5Year',
            scheduleExpression: 'cron(0 5 1 * ? *)',
            targetBackupVault: firstVault1F616cc6.attrBackupVaultName,
          },
        ],
      },
    });

    if (secondVaultFafc72cb == null) { throw new Error(`A combination of conditions caused 'secondVaultFafc72cb' to be undefined. Fixit.`); }
    const secondPlanEd732d55 = new backup.CfnBackupPlan(this, 'SecondPlanED732D55', {
      backupPlan: {
        backupPlanName: 'SecondPlan',
        backupPlanRule: [
          {
            lifecycle: {
              deleteAfterDays: 35,
            },
            ruleName: 'Daily',
            scheduleExpression: 'cron(0 5 * * ? *)',
            targetBackupVault: secondVaultFafc72cb.attrBackupVaultName,
          },
          {
            lifecycle: {
              deleteAfterDays: 90,
            },
            ruleName: 'Weekly',
            scheduleExpression: 'cron(0 5 ? * SAT *)',
            targetBackupVault: secondVaultFafc72cb.attrBackupVaultName,
          },
          {
            lifecycle: {
              deleteAfterDays: 1825,
              moveToColdStorageAfterDays: 90,
            },
            ruleName: 'Monthly5Year',
            scheduleExpression: 'cron(0 5 1 * ? *)',
            targetBackupVault: secondVaultFafc72cb.attrBackupVaultName,
          },
        ],
      },
    });

    if (firstPlanF748325d == null) { throw new Error(`A combination of conditions caused 'firstPlanF748325d' to be undefined. Fixit.`); }
    if (firstPlanSelectionWithAutoGeneratedPolicyRoleFbe2aac4 == null) { throw new Error(`A combination of conditions caused 'firstPlanSelectionWithAutoGeneratedPolicyRoleFbe2aac4' to be undefined. Fixit.`); }
    if (tableCd117fa1 == null) { throw new Error(`A combination of conditions caused 'tableCd117fa1' to be undefined. Fixit.`); }
    const firstPlanSelectionWithAutoGeneratedPolicyA52b85ef = new backup.CfnBackupSelection(this, 'FirstPlanSelectionWithAutoGeneratedPolicyA52B85EF', {
      backupPlanId: firstPlanF748325d.attrBackupPlanId,
      backupSelection: {
        iamRoleArn: firstPlanSelectionWithAutoGeneratedPolicyRoleFbe2aac4.attrArn,
        resources: [
          [
            'arn:',
            this.partition,
            ':dynamodb:',
            this.region,
            ':',
            this.account,
            ':table/',
            tableCd117fa1.ref,
          ].join(''),
        ],
        selectionName: 'SelectionWithAutoGeneratedPolicy',
      },
    });

    if (backupRoleF43cfd90 == null) { throw new Error(`A combination of conditions caused 'backupRoleF43cfd90' to be undefined. Fixit.`); }
    if (secondPlanEd732d55 == null) { throw new Error(`A combination of conditions caused 'secondPlanEd732d55' to be undefined. Fixit.`); }
    if (tableCd117fa1 == null) { throw new Error(`A combination of conditions caused 'tableCd117fa1' to be undefined. Fixit.`); }
    const secondPlanSelectionWithoutAutoGeneratedPolicy60F4ce3e = new backup.CfnBackupSelection(this, 'SecondPlanSelectionWithoutAutoGeneratedPolicy60F4CE3E', {
      backupPlanId: secondPlanEd732d55.attrBackupPlanId,
      backupSelection: {
        iamRoleArn: backupRoleF43cfd90.attrArn,
        resources: [
          [
            'arn:',
            this.partition,
            ':dynamodb:',
            this.region,
            ':',
            this.account,
            ':table/',
            tableCd117fa1.ref,
          ].join(''),
        ],
        selectionName: 'SelectionWithoutAutoGeneratedPolicy',
      },
    });
  }
}

