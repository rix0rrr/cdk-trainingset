import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';
import * as serverless from 'aws-cdk-lib/aws-serverless';

export interface AwsCdkRdsClusterRotationProps extends cdk.StackProps {
  /**
   * Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
   * @default '/cdk-bootstrap/hnb659fds/version'
   */
  readonly bootstrapVersion?: string;
}

export class AwsCdkRdsClusterRotation extends cdk.Stack {
  public constructor(scope: cdk.App, id: string, props: AwsCdkRdsClusterRotationProps = {}) {
    super(scope, id, props);

    // Applying default props
    props = {
      ...props,
      bootstrapVersion: new cdk.CfnParameter(this, 'BootstrapVersion', {
        type: 'AWS::SSM::Parameter::Value<String>',
        default: props.bootstrapVersion?.toString() ?? '/cdk-bootstrap/hnb659fds/version',
        description: 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
      }).valueAsString,
    };

    // Mappings
    const databaseRotationSingleUserSarMapping9Aeb3e55: Record<string, Record<string, string>> = {
      'aws': {
        'applicationId': 'arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.367',
      },
      'aws-cn': {
        'applicationId': 'arn:aws-cn:serverlessrepo:cn-north-1:193023089310:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.37',
      },
      'aws-us-gov': {
        'applicationId': 'arn:aws-us-gov:serverlessrepo:us-gov-west-1:023102451235:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.93',
      },
    };
    const customRotationOptionsRotationSingleUserSarMapping635D6f45: Record<string, Record<string, string>> = {
      'aws': {
        'applicationId': 'arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.367',
      },
      'aws-cn': {
        'applicationId': 'arn:aws-cn:serverlessrepo:cn-north-1:193023089310:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.37',
      },
      'aws-us-gov': {
        'applicationId': 'arn:aws-us-gov:serverlessrepo:us-gov-west-1:023102451235:applications/SecretsManagerRDSMySQLRotationSingleUser',
        'semanticVersion': '1.1.93',
      },
    };

    // Resources
    const customRotationOptionsSecret7Dcfffdb = new secretsmanager.CfnSecret(this, 'CustomRotationOptionsSecret7DCFFFDB', {
      description: [
        'Generated by the CDK for stack: ',
        this.stackName,
      ].join(''),
      generateSecretString: {
        excludeCharacters: ' %+~`#$&*()|[]{}:;<>?!\'/@\"\\',
        generateStringKey: 'password',
        passwordLength: 30,
        secretStringTemplate: '{\"username\":\"admin\"}',
      },
    });
    customRotationOptionsSecret7Dcfffdb.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const databaseSecret3B817195 = new secretsmanager.CfnSecret(this, 'DatabaseSecret3B817195', {
      description: [
        'Generated by the CDK for stack: ',
        this.stackName,
      ].join(''),
      generateSecretString: {
        excludeCharacters: ' %+~`#$&*()|[]{}:;<>?!\'/@\"\\',
        generateStringKey: 'password',
        passwordLength: 30,
        secretStringTemplate: '{\"username\":\"admin\"}',
      },
    });
    databaseSecret3B817195.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const vpcb9e5f0b4 = new ec2.CfnVPC(this, 'VPCB9E5F0B4', {
      cidrBlock: '10.0.0.0/16',
      enableDnsHostnames: true,
      enableDnsSupport: true,
      instanceTenancy: 'default',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC',
        },
      ],
    });

    const vpcigwb7e252d3 = new ec2.CfnInternetGateway(this, 'VPCIGWB7E252D3', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC',
        },
      ],
    });

    const vpcPublicSubnet1Eip6ad938e8 = new ec2.CfnEIP(this, 'VPCPublicSubnet1EIP6AD938E8', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet1',
        },
      ],
    });

    const vpcPublicSubnet2Eip4947bc00 = new ec2.CfnEIP(this, 'VPCPublicSubnet2EIP4947BC00', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet2',
        },
      ],
    });

    if (customRotationOptionsSecret7Dcfffdb == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecret7Dcfffdb' to be undefined. Fixit.`); }
    const customRotationOptionsSecretPolicyA73e17a8 = new secretsmanager.CfnResourcePolicy(this, 'CustomRotationOptionsSecretPolicyA73E17A8', {
      resourcePolicy: {
        Statement: [
          {
            Action: 'secretsmanager:DeleteSecret',
            Effect: 'Deny',
            Principal: {
              AWS: [
                'arn:',
                this.partition,
                ':iam::',
                this.account,
                ':root',
              ].join(''),
            },
            Resource: '*',
          },
        ],
        Version: '2012-10-17',
      },
      secretId: customRotationOptionsSecret7Dcfffdb.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const customRotationOptionsSecurityGroup9F3b46a1 = new ec2.CfnSecurityGroup(this, 'CustomRotationOptionsSecurityGroup9F3B46A1', {
      groupDescription: 'RDS security group',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const databaseRotationSingleUserSecurityGroupAc6e0e73 = new ec2.CfnSecurityGroup(this, 'DatabaseRotationSingleUserSecurityGroupAC6E0E73', {
      groupDescription: 'aws-cdk-rds-cluster-rotation/Database/RotationSingleUser/SecurityGroup',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (databaseSecret3B817195 == null) { throw new Error(`A combination of conditions caused 'databaseSecret3B817195' to be undefined. Fixit.`); }
    const databaseSecretPolicyEe73d3f8 = new secretsmanager.CfnResourcePolicy(this, 'DatabaseSecretPolicyEE73D3F8', {
      resourcePolicy: {
        Statement: [
          {
            Action: 'secretsmanager:DeleteSecret',
            Effect: 'Deny',
            Principal: {
              AWS: [
                'arn:',
                this.partition,
                ':iam::',
                this.account,
                ':root',
              ].join(''),
            },
            Resource: '*',
          },
        ],
        Version: '2012-10-17',
      },
      secretId: databaseSecret3B817195.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const databaseSecurityGroup5C91fdcb = new ec2.CfnSecurityGroup(this, 'DatabaseSecurityGroup5C91FDCB', {
      groupDescription: 'RDS security group',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const endpointSecurityGroup3A4d971b = new ec2.CfnSecurityGroup(this, 'EndpointSecurityGroup3A4D971B', {
      groupDescription: 'aws-cdk-rds-cluster-rotation/Endpoint/SecurityGroup',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      securityGroupIngress: [
        {
          cidrIp: vpcb9e5f0b4.attrCidrBlock,
          description: [
            'from ',
            vpcb9e5f0b4.attrCidrBlock,
            ':443',
          ].join(''),
          fromPort: 443,
          ipProtocol: 'tcp',
          toPort: 443,
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const securityGroupDd263621 = new ec2.CfnSecurityGroup(this, 'SecurityGroupDD263621', {
      groupDescription: 'aws-cdk-rds-cluster-rotation/SecurityGroup',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableBe8a6027 = new ec2.CfnRouteTable(this, 'VPCPrivateSubnet1RouteTableBE8A6027', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PrivateSubnet1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1Subnet8Bca10e0 = new ec2.CfnSubnet(this, 'VPCPrivateSubnet1Subnet8BCA10E0', {
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.128.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PrivateSubnet1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTable0A19e10e = new ec2.CfnRouteTable(this, 'VPCPrivateSubnet2RouteTable0A19E10E', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PrivateSubnet2',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2SubnetCfcdaa7a = new ec2.CfnSubnet(this, 'VPCPrivateSubnet2SubnetCFCDAA7A', {
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.192.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PrivateSubnet2',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTableFee4b781 = new ec2.CfnRouteTable(this, 'VPCPublicSubnet1RouteTableFEE4B781', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPublicSubnet1SubnetB4246d30 = new ec2.CfnSubnet(this, 'VPCPublicSubnet1SubnetB4246D30', {
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.0.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet1',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTable6F1a15f1 = new ec2.CfnRouteTable(this, 'VPCPublicSubnet2RouteTable6F1A15F1', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet2',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    const vpcPublicSubnet2Subnet74179F39 = new ec2.CfnSubnet(this, 'VPCPublicSubnet2Subnet74179F39', {
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.64.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet2',
        },
      ],
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    if (vpcigwb7e252d3 == null) { throw new Error(`A combination of conditions caused 'vpcigwb7e252d3' to be undefined. Fixit.`); }
    const vpcvpcgw99b986dc = new ec2.CfnVPCGatewayAttachment(this, 'VPCVPCGW99B986DC', {
      internetGatewayId: vpcigwb7e252d3.ref,
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const customRotationOptionsSubnets52Aebced = new rds.CfnDBSubnetGroup(this, 'CustomRotationOptionsSubnets52AEBCED', {
      dbSubnetGroupDescription: 'Subnets for CustomRotationOptions database',
      subnetIds: [
        vpcPrivateSubnet1Subnet8Bca10e0.ref,
        vpcPrivateSubnet2SubnetCfcdaa7a.ref,
      ],
    });

    if (databaseRotationSingleUserSecurityGroupAc6e0e73 == null) { throw new Error(`A combination of conditions caused 'databaseRotationSingleUserSecurityGroupAc6e0e73' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const databaseRotationSingleUser65F55654 = new serverless.CfnApplication(this, 'DatabaseRotationSingleUser65F55654', {
      location: {
        ApplicationId: databaseRotationSingleUserSarMapping9Aeb3e55[this.partition]['applicationId'],
        SemanticVersion: databaseRotationSingleUserSarMapping9Aeb3e55[this.partition]['semanticVersion'],
      },
      parameters: {
        endpoint: [
          'https://secretsmanager.',
          this.region,
          '.',
          this.urlSuffix,
        ].join(''),
        functionName: 'awscdkrdsclusterrotationDatabaseRotationSingleUser171A8E3A',
        vpcSubnetIds: [
          vpcPrivateSubnet1Subnet8Bca10e0.ref,
          ',',
          vpcPrivateSubnet2SubnetCfcdaa7a.ref,
        ].join(''),
        vpcSecurityGroupIds: databaseRotationSingleUserSecurityGroupAc6e0e73.attrGroupId,
        excludeCharacters: ' %+~`#$&*()|[]{}:;<>?!\'/@\"\\',
      },
    });
    databaseRotationSingleUser65F55654.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const databaseSubnets56F17b9a = new rds.CfnDBSubnetGroup(this, 'DatabaseSubnets56F17B9A', {
      dbSubnetGroupDescription: 'Subnets for Database database',
      subnetIds: [
        vpcPrivateSubnet1Subnet8Bca10e0.ref,
        vpcPrivateSubnet2SubnetCfcdaa7a.ref,
      ],
    });

    if (endpointSecurityGroup3A4d971b == null) { throw new Error(`A combination of conditions caused 'endpointSecurityGroup3A4d971b' to be undefined. Fixit.`); }
    if (vpcb9e5f0b4 == null) { throw new Error(`A combination of conditions caused 'vpcb9e5f0b4' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const endpointEef1fd8f = new ec2.CfnVPCEndpoint(this, 'EndpointEEF1FD8F', {
      privateDnsEnabled: true,
      securityGroupIds: [
        endpointSecurityGroup3A4d971b.attrGroupId,
      ],
      serviceName: [
        'com.amazonaws.',
        this.region,
        '.secretsmanager',
      ].join(''),
      subnetIds: [
        vpcPrivateSubnet1Subnet8Bca10e0.ref,
        vpcPrivateSubnet2SubnetCfcdaa7a.ref,
      ],
      vpcEndpointType: 'Interface',
      vpcId: vpcb9e5f0b4.ref,
    });

    if (vpcPrivateSubnet1RouteTableBe8a6027 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableBe8a6027' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableAssociation347902D1 = new ec2.CfnSubnetRouteTableAssociation(this, 'VPCPrivateSubnet1RouteTableAssociation347902D1', {
      routeTableId: vpcPrivateSubnet1RouteTableBe8a6027.ref,
      subnetId: vpcPrivateSubnet1Subnet8Bca10e0.ref,
    });

    if (vpcPrivateSubnet2RouteTable0A19e10e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable0A19e10e' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTableAssociation0C73d413 = new ec2.CfnSubnetRouteTableAssociation(this, 'VPCPrivateSubnet2RouteTableAssociation0C73D413', {
      routeTableId: vpcPrivateSubnet2RouteTable0A19e10e.ref,
      subnetId: vpcPrivateSubnet2SubnetCfcdaa7a.ref,
    });

    if (vpcigwb7e252d3 == null) { throw new Error(`A combination of conditions caused 'vpcigwb7e252d3' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTableFee4b781 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTableFee4b781' to be undefined. Fixit.`); }
    if (vpcvpcgw99b986dc == null) { throw new Error(`A combination of conditions caused 'vpcvpcgw99b986dc' to be undefined. Fixit.`); }
    const vpcPublicSubnet1DefaultRoute91Cef279 = new ec2.CfnRoute(this, 'VPCPublicSubnet1DefaultRoute91CEF279', {
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcigwb7e252d3.ref,
      routeTableId: vpcPublicSubnet1RouteTableFee4b781.ref,
    });
    vpcPublicSubnet1DefaultRoute91Cef279.addDependency(vpcvpcgw99b986dc);

    if (vpcPublicSubnet1RouteTableFee4b781 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTableFee4b781' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1SubnetB4246d30 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1SubnetB4246d30' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTableAssociation0B0896dc = new ec2.CfnSubnetRouteTableAssociation(this, 'VPCPublicSubnet1RouteTableAssociation0B0896DC', {
      routeTableId: vpcPublicSubnet1RouteTableFee4b781.ref,
      subnetId: vpcPublicSubnet1SubnetB4246d30.ref,
    });

    if (vpcigwb7e252d3 == null) { throw new Error(`A combination of conditions caused 'vpcigwb7e252d3' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTable6F1a15f1 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTable6F1a15f1' to be undefined. Fixit.`); }
    if (vpcvpcgw99b986dc == null) { throw new Error(`A combination of conditions caused 'vpcvpcgw99b986dc' to be undefined. Fixit.`); }
    const vpcPublicSubnet2DefaultRouteB7481bba = new ec2.CfnRoute(this, 'VPCPublicSubnet2DefaultRouteB7481BBA', {
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcigwb7e252d3.ref,
      routeTableId: vpcPublicSubnet2RouteTable6F1a15f1.ref,
    });
    vpcPublicSubnet2DefaultRouteB7481bba.addDependency(vpcvpcgw99b986dc);

    if (vpcPublicSubnet2RouteTable6F1a15f1 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTable6F1a15f1' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet74179F39 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet74179F39' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTableAssociation5A808732 = new ec2.CfnSubnetRouteTableAssociation(this, 'VPCPublicSubnet2RouteTableAssociation5A808732', {
      routeTableId: vpcPublicSubnet2RouteTable6F1a15f1.ref,
      subnetId: vpcPublicSubnet2Subnet74179F39.ref,
    });

    if (customRotationOptionsSecret7Dcfffdb == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecret7Dcfffdb' to be undefined. Fixit.`); }
    if (customRotationOptionsSecurityGroup9F3b46a1 == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecurityGroup9F3b46a1' to be undefined. Fixit.`); }
    if (customRotationOptionsSubnets52Aebced == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSubnets52Aebced' to be undefined. Fixit.`); }
    const customRotationOptions7Ca9e132 = new rds.CfnDBCluster(this, 'CustomRotationOptions7CA9E132', {
      copyTagsToSnapshot: true,
      dbClusterParameterGroupName: 'default.aurora-mysql8.0',
      dbSubnetGroupName: customRotationOptionsSubnets52Aebced.ref,
      engine: 'aurora-mysql',
      engineVersion: '8.0.mysql_aurora.3.03.0',
      masterUserPassword: [
        '{{resolve:secretsmanager:',
        customRotationOptionsSecret7Dcfffdb.ref,
        ':SecretString:password::}}',
      ].join(''),
      masterUsername: [
        '{{resolve:secretsmanager:',
        customRotationOptionsSecret7Dcfffdb.ref,
        ':SecretString:username::}}',
      ].join(''),
      vpcSecurityGroupIds: [
        customRotationOptionsSecurityGroup9F3b46a1.attrGroupId,
      ],
    });
    customRotationOptions7Ca9e132.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.SNAPSHOT;

    if (endpointEef1fd8f == null) { throw new Error(`A combination of conditions caused 'endpointEef1fd8f' to be undefined. Fixit.`); }
    if (securityGroupDd263621 == null) { throw new Error(`A combination of conditions caused 'securityGroupDd263621' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet8Bca10e0 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet8Bca10e0' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2SubnetCfcdaa7a == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2SubnetCfcdaa7a' to be undefined. Fixit.`); }
    const customRotationOptionsRotationSingleUserC555446f = new serverless.CfnApplication(this, 'CustomRotationOptionsRotationSingleUserC555446F', {
      location: {
        ApplicationId: customRotationOptionsRotationSingleUserSarMapping635D6f45[this.partition]['applicationId'],
        SemanticVersion: customRotationOptionsRotationSingleUserSarMapping635D6f45[this.partition]['semanticVersion'],
      },
      parameters: {
        endpoint: [
          'https://',
          endpointEef1fd8f.ref,
          '.secretsmanager.',
          this.region,
          '.',
          this.urlSuffix,
        ].join(''),
        functionName: 'dsclusterrotationCustomRotationOptionsRotationSingleUserBBE9175F',
        vpcSubnetIds: [
          vpcPrivateSubnet1Subnet8Bca10e0.ref,
          ',',
          vpcPrivateSubnet2SubnetCfcdaa7a.ref,
        ].join(''),
        vpcSecurityGroupIds: securityGroupDd263621.attrGroupId,
        excludeCharacters: '!@#$%^&*',
      },
    });
    customRotationOptionsRotationSingleUserC555446f.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    if (databaseSecret3B817195 == null) { throw new Error(`A combination of conditions caused 'databaseSecret3B817195' to be undefined. Fixit.`); }
    if (databaseSecurityGroup5C91fdcb == null) { throw new Error(`A combination of conditions caused 'databaseSecurityGroup5C91fdcb' to be undefined. Fixit.`); }
    if (databaseSubnets56F17b9a == null) { throw new Error(`A combination of conditions caused 'databaseSubnets56F17b9a' to be undefined. Fixit.`); }
    const databaseB269d8bb = new rds.CfnDBCluster(this, 'DatabaseB269D8BB', {
      copyTagsToSnapshot: true,
      dbClusterParameterGroupName: 'default.aurora-mysql8.0',
      dbSubnetGroupName: databaseSubnets56F17b9a.ref,
      engine: 'aurora-mysql',
      engineVersion: '8.0.mysql_aurora.3.03.0',
      masterUserPassword: [
        '{{resolve:secretsmanager:',
        databaseSecret3B817195.ref,
        ':SecretString:password::}}',
      ].join(''),
      masterUsername: [
        '{{resolve:secretsmanager:',
        databaseSecret3B817195.ref,
        ':SecretString:username::}}',
      ].join(''),
      vpcSecurityGroupIds: [
        databaseSecurityGroup5C91fdcb.attrGroupId,
      ],
    });
    databaseB269d8bb.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.SNAPSHOT;

    if (vpcPublicSubnet1DefaultRoute91Cef279 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1DefaultRoute91Cef279' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Eip6ad938e8 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Eip6ad938e8' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTableAssociation0B0896dc == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTableAssociation0B0896dc' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1SubnetB4246d30 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1SubnetB4246d30' to be undefined. Fixit.`); }
    const vpcPublicSubnet1NatGatewayE0556630 = new ec2.CfnNatGateway(this, 'VPCPublicSubnet1NATGatewayE0556630', {
      allocationId: vpcPublicSubnet1Eip6ad938e8.attrAllocationId,
      subnetId: vpcPublicSubnet1SubnetB4246d30.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet1',
        },
      ],
    });
    vpcPublicSubnet1NatGatewayE0556630.addDependency(vpcPublicSubnet1DefaultRoute91Cef279);
    vpcPublicSubnet1NatGatewayE0556630.addDependency(vpcPublicSubnet1RouteTableAssociation0B0896dc);

    if (vpcPublicSubnet2DefaultRouteB7481bba == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2DefaultRouteB7481bba' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Eip4947bc00 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Eip4947bc00' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTableAssociation5A808732 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableAssociation5A808732' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet74179F39 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet74179F39' to be undefined. Fixit.`); }
    const vpcPublicSubnet2NatGateway3C070193 = new ec2.CfnNatGateway(this, 'VPCPublicSubnet2NATGateway3C070193', {
      allocationId: vpcPublicSubnet2Eip4947bc00.attrAllocationId,
      subnetId: vpcPublicSubnet2Subnet74179F39.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-cluster-rotation/VPC/PublicSubnet2',
        },
      ],
    });
    vpcPublicSubnet2NatGateway3C070193.addDependency(vpcPublicSubnet2DefaultRouteB7481bba);
    vpcPublicSubnet2NatGateway3C070193.addDependency(vpcPublicSubnet2RouteTableAssociation5A808732);

    if (customRotationOptions7Ca9e132 == null) { throw new Error(`A combination of conditions caused 'customRotationOptions7Ca9e132' to be undefined. Fixit.`); }
    if (customRotationOptionsSecret7Dcfffdb == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecret7Dcfffdb' to be undefined. Fixit.`); }
    const customRotationOptionsSecretAttachment697A23bf = new secretsmanager.CfnSecretTargetAttachment(this, 'CustomRotationOptionsSecretAttachment697A23BF', {
      secretId: customRotationOptionsSecret7Dcfffdb.ref,
      targetId: customRotationOptions7Ca9e132.ref,
      targetType: 'AWS::RDS::DBCluster',
    });

    if (customRotationOptions7Ca9e132 == null) { throw new Error(`A combination of conditions caused 'customRotationOptions7Ca9e132' to be undefined. Fixit.`); }
    if (customRotationOptionsSecurityGroup9F3b46a1 == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecurityGroup9F3b46a1' to be undefined. Fixit.`); }
    if (securityGroupDd263621 == null) { throw new Error(`A combination of conditions caused 'securityGroupDd263621' to be undefined. Fixit.`); }
    const customRotationOptionsSecurityGroupfromawscdkrdsclusterrotationSecurityGroupB986d266IndirectPortF3255731 = new ec2.CfnSecurityGroupIngress(this, 'CustomRotationOptionsSecurityGroupfromawscdkrdsclusterrotationSecurityGroupB986D266IndirectPortF3255731', {
      description: 'from awscdkrdsclusterrotationSecurityGroupB986D266:{IndirectPort}',
      fromPort: customRotationOptions7Ca9e132.attrEndpointPort,
      groupId: customRotationOptionsSecurityGroup9F3b46a1.attrGroupId,
      ipProtocol: 'tcp',
      sourceSecurityGroupId: securityGroupDd263621.attrGroupId,
      toPort: customRotationOptions7Ca9e132.attrEndpointPort,
    });

    if (databaseB269d8bb == null) { throw new Error(`A combination of conditions caused 'databaseB269d8bb' to be undefined. Fixit.`); }
    if (databaseSecret3B817195 == null) { throw new Error(`A combination of conditions caused 'databaseSecret3B817195' to be undefined. Fixit.`); }
    const databaseSecretAttachmentE5d1b020 = new secretsmanager.CfnSecretTargetAttachment(this, 'DatabaseSecretAttachmentE5D1B020', {
      secretId: databaseSecret3B817195.ref,
      targetId: databaseB269d8bb.ref,
      targetType: 'AWS::RDS::DBCluster',
    });

    if (databaseB269d8bb == null) { throw new Error(`A combination of conditions caused 'databaseB269d8bb' to be undefined. Fixit.`); }
    if (databaseRotationSingleUserSecurityGroupAc6e0e73 == null) { throw new Error(`A combination of conditions caused 'databaseRotationSingleUserSecurityGroupAc6e0e73' to be undefined. Fixit.`); }
    if (databaseSecurityGroup5C91fdcb == null) { throw new Error(`A combination of conditions caused 'databaseSecurityGroup5C91fdcb' to be undefined. Fixit.`); }
    const databaseSecurityGroupfromawscdkrdsclusterrotationDatabaseRotationSingleUserSecurityGroup0Fff34b1IndirectPortE6a88723 = new ec2.CfnSecurityGroupIngress(this, 'DatabaseSecurityGroupfromawscdkrdsclusterrotationDatabaseRotationSingleUserSecurityGroup0FFF34B1IndirectPortE6A88723', {
      description: 'from awscdkrdsclusterrotationDatabaseRotationSingleUserSecurityGroup0FFF34B1:{IndirectPort}',
      fromPort: databaseB269d8bb.attrEndpointPort,
      groupId: databaseSecurityGroup5C91fdcb.attrGroupId,
      ipProtocol: 'tcp',
      sourceSecurityGroupId: databaseRotationSingleUserSecurityGroupAc6e0e73.attrGroupId,
      toPort: databaseB269d8bb.attrEndpointPort,
    });

    if (vpcPrivateSubnet1RouteTableBe8a6027 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableBe8a6027' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1NatGatewayE0556630 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1NatGatewayE0556630' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1DefaultRouteAe1d6490 = new ec2.CfnRoute(this, 'VPCPrivateSubnet1DefaultRouteAE1D6490', {
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet1NatGatewayE0556630.ref,
      routeTableId: vpcPrivateSubnet1RouteTableBe8a6027.ref,
    });

    if (vpcPrivateSubnet2RouteTable0A19e10e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable0A19e10e' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2NatGateway3C070193 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2NatGateway3C070193' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2DefaultRouteF4f5cfd2 = new ec2.CfnRoute(this, 'VPCPrivateSubnet2DefaultRouteF4F5CFD2', {
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet2NatGateway3C070193.ref,
      routeTableId: vpcPrivateSubnet2RouteTable0A19e10e.ref,
    });

    if (customRotationOptions7Ca9e132 == null) { throw new Error(`A combination of conditions caused 'customRotationOptions7Ca9e132' to be undefined. Fixit.`); }
    if (customRotationOptionsSubnets52Aebced == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSubnets52Aebced' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRouteAe1d6490 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRouteAe1d6490' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation347902D1 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation347902D1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteF4f5cfd2 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteF4f5cfd2' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation0C73d413 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation0C73d413' to be undefined. Fixit.`); }
    const customRotationOptionsInstance1D693e87c = new rds.CfnDBInstance(this, 'CustomRotationOptionsInstance1D693E87C', {
      dbClusterIdentifier: customRotationOptions7Ca9e132.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: customRotationOptionsSubnets52Aebced.ref,
      engine: 'aurora-mysql',
    });
    customRotationOptionsInstance1D693e87c.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    customRotationOptionsInstance1D693e87c.addDependency(vpcPrivateSubnet1DefaultRouteAe1d6490);
    customRotationOptionsInstance1D693e87c.addDependency(vpcPrivateSubnet1RouteTableAssociation347902D1);
    customRotationOptionsInstance1D693e87c.addDependency(vpcPrivateSubnet2DefaultRouteF4f5cfd2);
    customRotationOptionsInstance1D693e87c.addDependency(vpcPrivateSubnet2RouteTableAssociation0C73d413);

    if (customRotationOptions7Ca9e132 == null) { throw new Error(`A combination of conditions caused 'customRotationOptions7Ca9e132' to be undefined. Fixit.`); }
    if (customRotationOptionsSubnets52Aebced == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSubnets52Aebced' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRouteAe1d6490 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRouteAe1d6490' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation347902D1 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation347902D1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteF4f5cfd2 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteF4f5cfd2' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation0C73d413 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation0C73d413' to be undefined. Fixit.`); }
    const customRotationOptionsInstance2A21fadd8 = new rds.CfnDBInstance(this, 'CustomRotationOptionsInstance2A21FADD8', {
      dbClusterIdentifier: customRotationOptions7Ca9e132.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: customRotationOptionsSubnets52Aebced.ref,
      engine: 'aurora-mysql',
    });
    customRotationOptionsInstance2A21fadd8.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    customRotationOptionsInstance2A21fadd8.addDependency(vpcPrivateSubnet1DefaultRouteAe1d6490);
    customRotationOptionsInstance2A21fadd8.addDependency(vpcPrivateSubnet1RouteTableAssociation347902D1);
    customRotationOptionsInstance2A21fadd8.addDependency(vpcPrivateSubnet2DefaultRouteF4f5cfd2);
    customRotationOptionsInstance2A21fadd8.addDependency(vpcPrivateSubnet2RouteTableAssociation0C73d413);

    if (customRotationOptionsRotationSingleUserC555446f == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsRotationSingleUserC555446f' to be undefined. Fixit.`); }
    if (customRotationOptionsSecretAttachment697A23bf == null) { throw new Error(`A combination of conditions caused 'customRotationOptionsSecretAttachment697A23bf' to be undefined. Fixit.`); }
    const customRotationOptionsSecretAttachmentRotationScheduleD5aeb622 = new secretsmanager.CfnRotationSchedule(this, 'CustomRotationOptionsSecretAttachmentRotationScheduleD5AEB622', {
      rotateImmediatelyOnUpdate: false,
      rotationLambdaArn: customRotationOptionsRotationSingleUserC555446f.attrOutputsRotationLambdaArn,
      rotationRules: {
        scheduleExpression: 'rate(7 days)',
      },
      secretId: customRotationOptionsSecretAttachment697A23bf.ref,
    });

    if (databaseB269d8bb == null) { throw new Error(`A combination of conditions caused 'databaseB269d8bb' to be undefined. Fixit.`); }
    if (databaseSubnets56F17b9a == null) { throw new Error(`A combination of conditions caused 'databaseSubnets56F17b9a' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRouteAe1d6490 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRouteAe1d6490' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation347902D1 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation347902D1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteF4f5cfd2 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteF4f5cfd2' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation0C73d413 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation0C73d413' to be undefined. Fixit.`); }
    const databaseInstance1844F58fd = new rds.CfnDBInstance(this, 'DatabaseInstance1844F58FD', {
      dbClusterIdentifier: databaseB269d8bb.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: databaseSubnets56F17b9a.ref,
      engine: 'aurora-mysql',
    });
    databaseInstance1844F58fd.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    databaseInstance1844F58fd.addDependency(vpcPrivateSubnet1DefaultRouteAe1d6490);
    databaseInstance1844F58fd.addDependency(vpcPrivateSubnet1RouteTableAssociation347902D1);
    databaseInstance1844F58fd.addDependency(vpcPrivateSubnet2DefaultRouteF4f5cfd2);
    databaseInstance1844F58fd.addDependency(vpcPrivateSubnet2RouteTableAssociation0C73d413);

    if (databaseB269d8bb == null) { throw new Error(`A combination of conditions caused 'databaseB269d8bb' to be undefined. Fixit.`); }
    if (databaseSubnets56F17b9a == null) { throw new Error(`A combination of conditions caused 'databaseSubnets56F17b9a' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRouteAe1d6490 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRouteAe1d6490' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation347902D1 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation347902D1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteF4f5cfd2 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteF4f5cfd2' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation0C73d413 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation0C73d413' to be undefined. Fixit.`); }
    const databaseInstance2Aa380dee = new rds.CfnDBInstance(this, 'DatabaseInstance2AA380DEE', {
      dbClusterIdentifier: databaseB269d8bb.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: databaseSubnets56F17b9a.ref,
      engine: 'aurora-mysql',
    });
    databaseInstance2Aa380dee.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    databaseInstance2Aa380dee.addDependency(vpcPrivateSubnet1DefaultRouteAe1d6490);
    databaseInstance2Aa380dee.addDependency(vpcPrivateSubnet1RouteTableAssociation347902D1);
    databaseInstance2Aa380dee.addDependency(vpcPrivateSubnet2DefaultRouteF4f5cfd2);
    databaseInstance2Aa380dee.addDependency(vpcPrivateSubnet2RouteTableAssociation0C73d413);

    if (databaseRotationSingleUser65F55654 == null) { throw new Error(`A combination of conditions caused 'databaseRotationSingleUser65F55654' to be undefined. Fixit.`); }
    if (databaseSecretAttachmentE5d1b020 == null) { throw new Error(`A combination of conditions caused 'databaseSecretAttachmentE5d1b020' to be undefined. Fixit.`); }
    const databaseSecretAttachmentRotationScheduleA4e9f034 = new secretsmanager.CfnRotationSchedule(this, 'DatabaseSecretAttachmentRotationScheduleA4E9F034', {
      rotationLambdaArn: databaseRotationSingleUser65F55654.attrOutputsRotationLambdaArn,
      rotationRules: {
        scheduleExpression: 'rate(30 days)',
      },
      secretId: databaseSecretAttachmentE5d1b020.ref,
    });
  }
}

