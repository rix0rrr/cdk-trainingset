import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';

export interface aws-cdk-rds-proxy-sql-serverProps extends cdk.StackProps {
  /**
   * Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
   * @default '/cdk-bootstrap/hnb659fds/version'
   */
  readonly bootstrapVersion?: string;
}

export class aws-cdk-rds-proxy-sql-server extends cdk.Stack {
  public constructor(scope: cdk.App, id: string, props: aws-cdk-rds-proxy-sql-serverProps = {}) {
    super(scope, id, props);

    // Applying default props
    props = {
      ...props,
      bootstrapVersion: new cdk.CfnParameter(this, 'BootstrapVersion', {
        type: 'AWS::SSM::Parameter::Value<String>',
        default: props.bootstrapVersion?.toString() ?? '/cdk-bootstrap/hnb659fds/version',
        description: 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
      }).valueAsString,
    };

    // Resources
    const dbProxyIamRoleDb6e75f4 = new iam.CfnRole(this, 'DbProxyIAMRoleDB6E75F4', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'rds.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
    });

    const sqlProxyRole0Dc4ddbc = new iam.CfnRole(this, 'SqlProxyRole0DC4DDBC', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              AWS: [
                'arn:',
                this.partition,
                ':iam::',
                this.account,
                ':root',
              ].join(''),
            },
          },
        ],
        Version: '2012-10-17',
      },
    });

    const sqlServerDbInstanceSecretAc239a57 = new secretsmanager.CfnSecret(this, 'SqlServerDbInstanceSecretAC239A57', {
      description: [
        'Generated by the CDK for stack: ',
        this.stackName,
      ].join(''),
      generateSecretString: {
        excludeCharacters: '\"@/\\',
        generateStringKey: 'password',
        passwordLength: 30,
        secretStringTemplate: '{\"username\":\"master\"}',
      },
    });
    sqlServerDbInstanceSecretAc239a57.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const vpcA2121c38 = new ec2.CfnVPC(this, 'vpcA2121C38', {
      cidrBlock: '10.0.0.0/16',
      enableDnsHostnames: true,
      enableDnsSupport: true,
      instanceTenancy: 'default',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc',
        },
      ],
    });

    const vpcIgwe57cbdca = new ec2.CfnInternetGateway(this, 'vpcIGWE57CBDCA', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc',
        },
      ],
    });

    const vpcPublicSubnet1Eipda49dcbe = new ec2.CfnEIP(this, 'vpcPublicSubnet1EIPDA49DCBE', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet1',
        },
      ],
    });

    const vpcPublicSubnet2Eip9b3743b1 = new ec2.CfnEIP(this, 'vpcPublicSubnet2EIP9B3743B1', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbProxyProxySecurityGroupCfb8b534 = new ec2.CfnSecurityGroup(this, 'DbProxyProxySecurityGroupCFB8B534', {
      groupDescription: 'SecurityGroup for Database Proxy',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const sqlServerDbInstanceSecurityGroupAe784a28 = new ec2.CfnSecurityGroup(this, 'SqlServerDbInstanceSecurityGroupAE784A28', {
      groupDescription: 'Security group for SqlServerDbInstance database',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableB41a48cc = new ec2.CfnRouteTable(this, 'vpcPrivateSubnet1RouteTableB41A48CC', {
      vpcId: vpcA2121c38.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PrivateSubnet1',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1Subnet934893E8 = new ec2.CfnSubnet(this, 'vpcPrivateSubnet1Subnet934893E8', {
      vpcId: vpcA2121c38.ref,
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.128.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PrivateSubnet1',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTable7280F23e = new ec2.CfnRouteTable(this, 'vpcPrivateSubnet2RouteTable7280F23E', {
      vpcId: vpcA2121c38.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PrivateSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2Subnet7031C2ba = new ec2.CfnSubnet(this, 'vpcPrivateSubnet2Subnet7031C2BA', {
      vpcId: vpcA2121c38.ref,
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.192.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PrivateSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTable48A2df9b = new ec2.CfnRouteTable(this, 'vpcPublicSubnet1RouteTable48A2DF9B', {
      vpcId: vpcA2121c38.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet1',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet1Subnet2E65531e = new ec2.CfnSubnet(this, 'vpcPublicSubnet1Subnet2E65531E', {
      vpcId: vpcA2121c38.ref,
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.0.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet1',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTableEb40d4cb = new ec2.CfnRouteTable(this, 'vpcPublicSubnet2RouteTableEB40D4CB', {
      vpcId: vpcA2121c38.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet2Subnet009B674f = new ec2.CfnSubnet(this, 'vpcPublicSubnet2Subnet009B674F', {
      vpcId: vpcA2121c38.ref,
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.64.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    const vpcVpcgw7984c166 = new ec2.CfnVPCGatewayAttachment(this, 'vpcVPCGW7984C166', {
      vpcId: vpcA2121c38.ref,
      internetGatewayId: vpcIgwe57cbdca.ref,
    });

    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const sqlServerDbInstanceSubnetGroupAe46487c = new rds.CfnDBSubnetGroup(this, 'SqlServerDbInstanceSubnetGroupAE46487C', {
      dbSubnetGroupDescription: 'Subnet group for SqlServerDbInstance database',
      subnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (vpcPrivateSubnet1RouteTableB41a48cc == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableB41a48cc' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableAssociation67945127 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPrivateSubnet1RouteTableAssociation67945127', {
      routeTableId: vpcPrivateSubnet1RouteTableB41a48cc.ref,
      subnetId: vpcPrivateSubnet1Subnet934893E8.ref,
    });

    if (vpcPrivateSubnet2RouteTable7280F23e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable7280F23e' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTableAssociation007E94d3 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPrivateSubnet2RouteTableAssociation007E94D3', {
      routeTableId: vpcPrivateSubnet2RouteTable7280F23e.ref,
      subnetId: vpcPrivateSubnet2Subnet7031C2ba.ref,
    });

    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTable48A2df9b == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTable48A2df9b' to be undefined. Fixit.`); }
    if (vpcVpcgw7984c166 == null) { throw new Error(`A combination of conditions caused 'vpcVpcgw7984c166' to be undefined. Fixit.`); }
    const vpcPublicSubnet1DefaultRoute10708846 = new ec2.CfnRoute(this, 'vpcPublicSubnet1DefaultRoute10708846', {
      routeTableId: vpcPublicSubnet1RouteTable48A2df9b.ref,
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcIgwe57cbdca.ref,
    });
    vpcPublicSubnet1DefaultRoute10708846.addDependency(vpcVpcgw7984c166);

    if (vpcPublicSubnet1RouteTable48A2df9b == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTable48A2df9b' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Subnet2E65531e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Subnet2E65531e' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTableAssociation5D3f4579 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPublicSubnet1RouteTableAssociation5D3F4579', {
      routeTableId: vpcPublicSubnet1RouteTable48A2df9b.ref,
      subnetId: vpcPublicSubnet1Subnet2E65531e.ref,
    });

    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTableEb40d4cb == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableEb40d4cb' to be undefined. Fixit.`); }
    if (vpcVpcgw7984c166 == null) { throw new Error(`A combination of conditions caused 'vpcVpcgw7984c166' to be undefined. Fixit.`); }
    const vpcPublicSubnet2DefaultRouteA1ec0f60 = new ec2.CfnRoute(this, 'vpcPublicSubnet2DefaultRouteA1EC0F60', {
      routeTableId: vpcPublicSubnet2RouteTableEb40d4cb.ref,
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcIgwe57cbdca.ref,
    });
    vpcPublicSubnet2DefaultRouteA1ec0f60.addDependency(vpcVpcgw7984c166);

    if (vpcPublicSubnet2RouteTableEb40d4cb == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableEb40d4cb' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet009B674f == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet009B674f' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTableAssociation21F81b59 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPublicSubnet2RouteTableAssociation21F81B59', {
      routeTableId: vpcPublicSubnet2RouteTableEb40d4cb.ref,
      subnetId: vpcPublicSubnet2Subnet009B674f.ref,
    });

    if (sqlServerDbInstanceSecretAc239a57 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecretAc239a57' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSecurityGroupAe784a28 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecurityGroupAe784a28' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSubnetGroupAe46487c == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSubnetGroupAe46487c' to be undefined. Fixit.`); }
    const sqlServerDbInstance8422C0f9 = new rds.CfnDBInstance(this, 'SqlServerDbInstance8422C0F9', {
      allocatedStorage: '100',
      copyTagsToSnapshot: true,
      dbInstanceClass: 'db.t3.small',
      dbSubnetGroupName: sqlServerDbInstanceSubnetGroupAe46487c.ref,
      engine: 'sqlserver-ex',
      engineVersion: '15.00',
      licenseModel: 'license-included',
      masterUsername: [
        '{{resolve:secretsmanager:',
        sqlServerDbInstanceSecretAc239a57.ref,
        ':SecretString:username::}}',
      ].join(''),
      masterUserPassword: [
        '{{resolve:secretsmanager:',
        sqlServerDbInstanceSecretAc239a57.ref,
        ':SecretString:password::}}',
      ].join(''),
      storageType: 'gp2',
      vpcSecurityGroups: [
        sqlServerDbInstanceSecurityGroupAe784a28.attrGroupId,
      ],
    });
    sqlServerDbInstance8422C0f9.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    if (vpcPublicSubnet1DefaultRoute10708846 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1DefaultRoute10708846' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Eipda49dcbe == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Eipda49dcbe' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTableAssociation5D3f4579 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTableAssociation5D3f4579' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Subnet2E65531e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Subnet2E65531e' to be undefined. Fixit.`); }
    const vpcPublicSubnet1NatGateway9C16659e = new ec2.CfnNatGateway(this, 'vpcPublicSubnet1NATGateway9C16659E', {
      subnetId: vpcPublicSubnet1Subnet2E65531e.ref,
      allocationId: vpcPublicSubnet1Eipda49dcbe.attrAllocationId,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet1',
        },
      ],
    });
    vpcPublicSubnet1NatGateway9C16659e.addDependency(vpcPublicSubnet1DefaultRoute10708846);
    vpcPublicSubnet1NatGateway9C16659e.addDependency(vpcPublicSubnet1RouteTableAssociation5D3f4579);

    if (vpcPublicSubnet2DefaultRouteA1ec0f60 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2DefaultRouteA1ec0f60' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Eip9b3743b1 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Eip9b3743b1' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTableAssociation21F81b59 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableAssociation21F81b59' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet009B674f == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet009B674f' to be undefined. Fixit.`); }
    const vpcPublicSubnet2NatGateway9B8ae11a = new ec2.CfnNatGateway(this, 'vpcPublicSubnet2NATGateway9B8AE11A', {
      subnetId: vpcPublicSubnet2Subnet009B674f.ref,
      allocationId: vpcPublicSubnet2Eip9b3743b1.attrAllocationId,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy-sql-server/vpc/PublicSubnet2',
        },
      ],
    });
    vpcPublicSubnet2NatGateway9B8ae11a.addDependency(vpcPublicSubnet2DefaultRouteA1ec0f60);
    vpcPublicSubnet2NatGateway9B8ae11a.addDependency(vpcPublicSubnet2RouteTableAssociation21F81b59);

    if (sqlServerDbInstance8422C0f9 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstance8422C0f9' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSecretAc239a57 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecretAc239a57' to be undefined. Fixit.`); }
    const sqlServerDbInstanceSecretAttachment87Ae8779 = new secretsmanager.CfnSecretTargetAttachment(this, 'SqlServerDbInstanceSecretAttachment87AE8779', {
      secretId: sqlServerDbInstanceSecretAc239a57.ref,
      targetId: sqlServerDbInstance8422C0f9.ref,
      targetType: 'AWS::RDS::DBInstance',
    });

    if (dbProxyProxySecurityGroupCfb8b534 == null) { throw new Error(`A combination of conditions caused 'dbProxyProxySecurityGroupCfb8b534' to be undefined. Fixit.`); }
    if (sqlServerDbInstance8422C0f9 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstance8422C0f9' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSecurityGroupAe784a28 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecurityGroupAe784a28' to be undefined. Fixit.`); }
    const sqlServerDbInstanceSecurityGroupfromawscdkrdsproxysqlserverDbProxyProxySecurityGroupEa4a8a53IndirectPortB7f9ee50 = new ec2.CfnSecurityGroupIngress(this, 'SqlServerDbInstanceSecurityGroupfromawscdkrdsproxysqlserverDbProxyProxySecurityGroupEA4A8A53IndirectPortB7F9EE50', {
      ipProtocol: 'tcp',
      description: 'Allow connections to the database Instance from the Proxy',
      fromPort: sqlServerDbInstance8422C0f9.attrEndpointPort,
      groupId: sqlServerDbInstanceSecurityGroupAe784a28.attrGroupId,
      sourceSecurityGroupId: dbProxyProxySecurityGroupCfb8b534.attrGroupId,
      toPort: sqlServerDbInstance8422C0f9.attrEndpointPort,
    });

    if (vpcPrivateSubnet1RouteTableB41a48cc == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableB41a48cc' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1NatGateway9C16659e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1NatGateway9C16659e' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1DefaultRoute1Aa8e2e5 = new ec2.CfnRoute(this, 'vpcPrivateSubnet1DefaultRoute1AA8E2E5', {
      routeTableId: vpcPrivateSubnet1RouteTableB41a48cc.ref,
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet1NatGateway9C16659e.ref,
    });

    if (vpcPrivateSubnet2RouteTable7280F23e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable7280F23e' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2NatGateway9B8ae11a == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2NatGateway9B8ae11a' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2DefaultRouteB0e07f99 = new ec2.CfnRoute(this, 'vpcPrivateSubnet2DefaultRouteB0E07F99', {
      routeTableId: vpcPrivateSubnet2RouteTable7280F23e.ref,
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet2NatGateway9B8ae11a.ref,
    });

    if (dbProxyIamRoleDb6e75f4 == null) { throw new Error(`A combination of conditions caused 'dbProxyIamRoleDb6e75f4' to be undefined. Fixit.`); }
    if (dbProxyProxySecurityGroupCfb8b534 == null) { throw new Error(`A combination of conditions caused 'dbProxyProxySecurityGroupCfb8b534' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSecretAttachment87Ae8779 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecretAttachment87Ae8779' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbProxy471Abcb4 = new rds.CfnDBProxy(this, 'DbProxy471ABCB4', {
      auth: [
        {
          authScheme: 'SECRETS',
          iamAuth: 'REQUIRED',
          secretArn: sqlServerDbInstanceSecretAttachment87Ae8779.ref,
        },
      ],
      dbProxyName: 'awscdkrdsproxysqlserverDbProxy3F5C6270',
      engineFamily: 'SQLSERVER',
      roleArn: dbProxyIamRoleDb6e75f4.attrArn,
      vpcSubnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
      requireTls: true,
      vpcSecurityGroupIds: [
        dbProxyProxySecurityGroupCfb8b534.attrGroupId,
      ],
    });

    if (dbProxyIamRoleDb6e75f4 == null) { throw new Error(`A combination of conditions caused 'dbProxyIamRoleDb6e75f4' to be undefined. Fixit.`); }
    if (sqlServerDbInstanceSecretAttachment87Ae8779 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstanceSecretAttachment87Ae8779' to be undefined. Fixit.`); }
    const dbProxyIamRoleDefaultPolicy3Ab2f318 = new iam.CfnPolicy(this, 'DbProxyIAMRoleDefaultPolicy3AB2F318', {
      policyDocument: {
        Statement: [
          {
            Action: [
              'secretsmanager:DescribeSecret',
              'secretsmanager:GetSecretValue',
            ],
            Effect: 'Allow',
            Resource: sqlServerDbInstanceSecretAttachment87Ae8779.ref,
          },
        ],
        Version: '2012-10-17',
      },
      policyName: 'DbProxyIAMRoleDefaultPolicy3AB2F318',
      roles: [
        dbProxyIamRoleDb6e75f4.ref,
      ],
    });

    if (dbProxy471Abcb4 == null) { throw new Error(`A combination of conditions caused 'dbProxy471Abcb4' to be undefined. Fixit.`); }
    if (sqlServerDbInstance8422C0f9 == null) { throw new Error(`A combination of conditions caused 'sqlServerDbInstance8422C0f9' to be undefined. Fixit.`); }
    const dbProxyProxyTargetGroupE3127b9c = new rds.CfnDBProxyTargetGroup(this, 'DbProxyProxyTargetGroupE3127B9C', {
      dbProxyName: dbProxy471Abcb4.ref,
      targetGroupName: 'default',
      connectionPoolConfigurationInfo: {
        connectionBorrowTimeout: 30,
        maxConnectionsPercent: 50,
      },
      dbInstanceIdentifiers: [
        sqlServerDbInstance8422C0f9.ref,
      ],
    });

    if (dbProxy471Abcb4 == null) { throw new Error(`A combination of conditions caused 'dbProxy471Abcb4' to be undefined. Fixit.`); }
    if (sqlProxyRole0Dc4ddbc == null) { throw new Error(`A combination of conditions caused 'sqlProxyRole0Dc4ddbc' to be undefined. Fixit.`); }
    const sqlProxyRoleDefaultPolicy225Db22d = new iam.CfnPolicy(this, 'SqlProxyRoleDefaultPolicy225DB22D', {
      policyDocument: {
        Statement: [
          {
            Action: 'rds-db:connect',
            Effect: 'Allow',
            Resource: [
              'arn:',
              this.partition,
              ':rds-db:',
              this.region,
              ':',
              this.account,
              ':dbuser:',
              cdk.Fn.select(6, cdk.Fn.split(':', dbProxy471Abcb4.attrDbProxyArn)),
              '/master',
            ].join(''),
          },
        ],
        Version: '2012-10-17',
      },
      policyName: 'SqlProxyRoleDefaultPolicy225DB22D',
      roles: [
        sqlProxyRole0Dc4ddbc.ref,
      ],
    });
  }
}

