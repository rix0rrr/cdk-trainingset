import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';

export interface AwsCdkRdsProxyProps extends cdk.StackProps {
  /**
   * Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
   * @default '/cdk-bootstrap/hnb659fds/version'
   */
  readonly bootstrapVersion?: string;
}

export class AwsCdkRdsProxy extends cdk.Stack {
  public constructor(scope: cdk.App, id: string, props: AwsCdkRdsProxyProps = {}) {
    super(scope, id, props);

    // Applying default props
    props = {
      ...props,
      bootstrapVersion: new cdk.CfnParameter(this, 'BootstrapVersion', {
        type: 'AWS::SSM::Parameter::Value<String>',
        default: props.bootstrapVersion?.toString() ?? '/cdk-bootstrap/hnb659fds/version',
        description: 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
      }).valueAsString,
    };

    // Resources
    const dbClusterProxy2IamRole190D217c = new iam.CfnRole(this, 'dbClusterProxy2IAMRole190D217C', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'rds.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
    });

    const dbClusterProxyIamRole693E39f5 = new iam.CfnRole(this, 'dbClusterProxyIAMRole693E39F5', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'rds.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
    });

    const dbClusterSecretCea6d7b6 = new secretsmanager.CfnSecret(this, 'dbClusterSecretCEA6D7B6', {
      description: [
        'Generated by the CDK for stack: ',
        this.stackName,
      ].join(''),
      generateSecretString: {
        excludeCharacters: ' %+~`#$&*()|[]{}:;<>?!\'/@\"\\',
        generateStringKey: 'password',
        passwordLength: 30,
        secretStringTemplate: '{\"username\":\"postgres\"}',
      },
    });
    dbClusterSecretCea6d7b6.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const dbInstanceSecret032D3661 = new secretsmanager.CfnSecret(this, 'dbInstanceSecret032D3661', {
      description: [
        'Generated by the CDK for stack: ',
        this.stackName,
      ].join(''),
      generateSecretString: {
        excludeCharacters: '\"@/\\',
        generateStringKey: 'password',
        passwordLength: 30,
        secretStringTemplate: '{\"username\":\"master\"}',
      },
    });
    dbInstanceSecret032D3661.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    const dbProxyIamRole662F3ab8 = new iam.CfnRole(this, 'dbProxyIAMRole662F3AB8', {
      assumeRolePolicyDocument: {
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Principal: {
              Service: 'rds.amazonaws.com',
            },
          },
        ],
        Version: '2012-10-17',
      },
    });

    const vpcA2121c38 = new ec2.CfnVPC(this, 'vpcA2121C38', {
      cidrBlock: '10.0.0.0/16',
      enableDnsHostnames: true,
      enableDnsSupport: true,
      instanceTenancy: 'default',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc',
        },
      ],
    });

    const vpcIgwe57cbdca = new ec2.CfnInternetGateway(this, 'vpcIGWE57CBDCA', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc',
        },
      ],
    });

    const vpcPublicSubnet1Eipda49dcbe = new ec2.CfnEIP(this, 'vpcPublicSubnet1EIPDA49DCBE', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet1',
        },
      ],
    });

    const vpcPublicSubnet2Eip9b3743b1 = new ec2.CfnEIP(this, 'vpcPublicSubnet2EIP9B3743B1', {
      domain: 'vpc',
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet2',
        },
      ],
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbClusterProxy2ProxySecurityGroupB44507ae = new ec2.CfnSecurityGroup(this, 'dbClusterProxy2ProxySecurityGroupB44507AE', {
      groupDescription: 'SecurityGroup for Database Proxy',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbClusterProxyProxySecurityGroup170F327d = new ec2.CfnSecurityGroup(this, 'dbClusterProxyProxySecurityGroup170F327D', {
      groupDescription: 'SecurityGroup for Database Proxy',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbClusterSecurityGroupCaa1a91f = new ec2.CfnSecurityGroup(this, 'dbClusterSecurityGroupCAA1A91F', {
      groupDescription: 'RDS security group',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbInstanceSecurityGroupA58a00a3 = new ec2.CfnSecurityGroup(this, 'dbInstanceSecurityGroupA58A00A3', {
      groupDescription: 'Security group for dbInstance database',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const dbProxyProxySecurityGroup16E727a7 = new ec2.CfnSecurityGroup(this, 'dbProxyProxySecurityGroup16E727A7', {
      groupDescription: 'SecurityGroup for Database Proxy',
      securityGroupEgress: [
        {
          cidrIp: '0.0.0.0/0',
          description: 'Allow all outbound traffic by default',
          ipProtocol: '-1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableB41a48cc = new ec2.CfnRouteTable(this, 'vpcPrivateSubnet1RouteTableB41A48CC', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PrivateSubnet1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1Subnet934893E8 = new ec2.CfnSubnet(this, 'vpcPrivateSubnet1Subnet934893E8', {
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.128.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PrivateSubnet1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTable7280F23e = new ec2.CfnRouteTable(this, 'vpcPrivateSubnet2RouteTable7280F23E', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PrivateSubnet2',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2Subnet7031C2ba = new ec2.CfnSubnet(this, 'vpcPrivateSubnet2Subnet7031C2BA', {
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.192.0/18',
      mapPublicIpOnLaunch: false,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Private',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Private',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PrivateSubnet2',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTable48A2df9b = new ec2.CfnRouteTable(this, 'vpcPublicSubnet1RouteTable48A2DF9B', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet1Subnet2E65531e = new ec2.CfnSubnet(this, 'vpcPublicSubnet1Subnet2E65531E', {
      availabilityZone: cdk.Fn.select(0, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.0.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet1',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTableEb40d4cb = new ec2.CfnRouteTable(this, 'vpcPublicSubnet2RouteTableEB40D4CB', {
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet2',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    const vpcPublicSubnet2Subnet009B674f = new ec2.CfnSubnet(this, 'vpcPublicSubnet2Subnet009B674F', {
      availabilityZone: cdk.Fn.select(1, cdk.Fn.getAzs('')),
      cidrBlock: '10.0.64.0/18',
      mapPublicIpOnLaunch: true,
      tags: [
        {
          key: 'aws-cdk:subnet-name',
          value: 'Public',
        },
        {
          key: 'aws-cdk:subnet-type',
          value: 'Public',
        },
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet2',
        },
      ],
      vpcId: vpcA2121c38.ref,
    });

    if (vpcA2121c38 == null) { throw new Error(`A combination of conditions caused 'vpcA2121c38' to be undefined. Fixit.`); }
    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    const vpcVpcgw7984c166 = new ec2.CfnVPCGatewayAttachment(this, 'vpcVPCGW7984C166', {
      internetGatewayId: vpcIgwe57cbdca.ref,
      vpcId: vpcA2121c38.ref,
    });

    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbClusterSubnets03B9b0e1 = new rds.CfnDBSubnetGroup(this, 'dbClusterSubnets03B9B0E1', {
      dbSubnetGroupDescription: 'Subnets for dbCluster database',
      subnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbInstanceSubnetGroupD062ec9e = new rds.CfnDBSubnetGroup(this, 'dbInstanceSubnetGroupD062EC9E', {
      dbSubnetGroupDescription: 'Subnet group for dbInstance database',
      subnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (vpcPrivateSubnet1RouteTableB41a48cc == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableB41a48cc' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1RouteTableAssociation67945127 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPrivateSubnet1RouteTableAssociation67945127', {
      routeTableId: vpcPrivateSubnet1RouteTableB41a48cc.ref,
      subnetId: vpcPrivateSubnet1Subnet934893E8.ref,
    });

    if (vpcPrivateSubnet2RouteTable7280F23e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable7280F23e' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2RouteTableAssociation007E94d3 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPrivateSubnet2RouteTableAssociation007E94D3', {
      routeTableId: vpcPrivateSubnet2RouteTable7280F23e.ref,
      subnetId: vpcPrivateSubnet2Subnet7031C2ba.ref,
    });

    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTable48A2df9b == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTable48A2df9b' to be undefined. Fixit.`); }
    if (vpcVpcgw7984c166 == null) { throw new Error(`A combination of conditions caused 'vpcVpcgw7984c166' to be undefined. Fixit.`); }
    const vpcPublicSubnet1DefaultRoute10708846 = new ec2.CfnRoute(this, 'vpcPublicSubnet1DefaultRoute10708846', {
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcIgwe57cbdca.ref,
      routeTableId: vpcPublicSubnet1RouteTable48A2df9b.ref,
    });
    vpcPublicSubnet1DefaultRoute10708846.addDependency(vpcVpcgw7984c166);

    if (vpcPublicSubnet1RouteTable48A2df9b == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTable48A2df9b' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Subnet2E65531e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Subnet2E65531e' to be undefined. Fixit.`); }
    const vpcPublicSubnet1RouteTableAssociation5D3f4579 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPublicSubnet1RouteTableAssociation5D3F4579', {
      routeTableId: vpcPublicSubnet1RouteTable48A2df9b.ref,
      subnetId: vpcPublicSubnet1Subnet2E65531e.ref,
    });

    if (vpcIgwe57cbdca == null) { throw new Error(`A combination of conditions caused 'vpcIgwe57cbdca' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTableEb40d4cb == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableEb40d4cb' to be undefined. Fixit.`); }
    if (vpcVpcgw7984c166 == null) { throw new Error(`A combination of conditions caused 'vpcVpcgw7984c166' to be undefined. Fixit.`); }
    const vpcPublicSubnet2DefaultRouteA1ec0f60 = new ec2.CfnRoute(this, 'vpcPublicSubnet2DefaultRouteA1EC0F60', {
      destinationCidrBlock: '0.0.0.0/0',
      gatewayId: vpcIgwe57cbdca.ref,
      routeTableId: vpcPublicSubnet2RouteTableEb40d4cb.ref,
    });
    vpcPublicSubnet2DefaultRouteA1ec0f60.addDependency(vpcVpcgw7984c166);

    if (vpcPublicSubnet2RouteTableEb40d4cb == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableEb40d4cb' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet009B674f == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet009B674f' to be undefined. Fixit.`); }
    const vpcPublicSubnet2RouteTableAssociation21F81b59 = new ec2.CfnSubnetRouteTableAssociation(this, 'vpcPublicSubnet2RouteTableAssociation21F81B59', {
      routeTableId: vpcPublicSubnet2RouteTableEb40d4cb.ref,
      subnetId: vpcPublicSubnet2Subnet009B674f.ref,
    });

    if (dbClusterSecretCea6d7b6 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretCea6d7b6' to be undefined. Fixit.`); }
    if (dbClusterSecurityGroupCaa1a91f == null) { throw new Error(`A combination of conditions caused 'dbClusterSecurityGroupCaa1a91f' to be undefined. Fixit.`); }
    if (dbClusterSubnets03B9b0e1 == null) { throw new Error(`A combination of conditions caused 'dbClusterSubnets03B9b0e1' to be undefined. Fixit.`); }
    const dbClusterE86e47ae = new rds.CfnDBCluster(this, 'dbClusterE86E47AE', {
      copyTagsToSnapshot: true,
      dbClusterParameterGroupName: 'default.aurora-postgresql14',
      dbSubnetGroupName: dbClusterSubnets03B9b0e1.ref,
      engine: 'aurora-postgresql',
      engineVersion: '14.5',
      masterUserPassword: [
        '{{resolve:secretsmanager:',
        dbClusterSecretCea6d7b6.ref,
        ':SecretString:password::}}',
      ].join(''),
      masterUsername: [
        '{{resolve:secretsmanager:',
        dbClusterSecretCea6d7b6.ref,
        ':SecretString:username::}}',
      ].join(''),
      port: 5432,
      vpcSecurityGroupIds: [
        dbClusterSecurityGroupCaa1a91f.attrGroupId,
      ],
    });
    dbClusterE86e47ae.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.SNAPSHOT;

    if (dbInstanceSecret032D3661 == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecret032D3661' to be undefined. Fixit.`); }
    if (dbInstanceSecurityGroupA58a00a3 == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecurityGroupA58a00a3' to be undefined. Fixit.`); }
    if (dbInstanceSubnetGroupD062ec9e == null) { throw new Error(`A combination of conditions caused 'dbInstanceSubnetGroupD062ec9e' to be undefined. Fixit.`); }
    const dbInstance4076B1ec = new rds.CfnDBInstance(this, 'dbInstance4076B1EC', {
      allocatedStorage: '100',
      copyTagsToSnapshot: true,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: dbInstanceSubnetGroupD062ec9e.ref,
      engine: 'postgres',
      engineVersion: '15.2',
      masterUserPassword: [
        '{{resolve:secretsmanager:',
        dbInstanceSecret032D3661.ref,
        ':SecretString:password::}}',
      ].join(''),
      masterUsername: [
        '{{resolve:secretsmanager:',
        dbInstanceSecret032D3661.ref,
        ':SecretString:username::}}',
      ].join(''),
      storageType: 'gp2',
      vpcSecurityGroups: [
        dbInstanceSecurityGroupA58a00a3.attrGroupId,
      ],
    });
    dbInstance4076B1ec.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;

    if (vpcPublicSubnet1DefaultRoute10708846 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1DefaultRoute10708846' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Eipda49dcbe == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Eipda49dcbe' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1RouteTableAssociation5D3f4579 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1RouteTableAssociation5D3f4579' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1Subnet2E65531e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1Subnet2E65531e' to be undefined. Fixit.`); }
    const vpcPublicSubnet1NatGateway9C16659e = new ec2.CfnNatGateway(this, 'vpcPublicSubnet1NATGateway9C16659E', {
      allocationId: vpcPublicSubnet1Eipda49dcbe.attrAllocationId,
      subnetId: vpcPublicSubnet1Subnet2E65531e.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet1',
        },
      ],
    });
    vpcPublicSubnet1NatGateway9C16659e.addDependency(vpcPublicSubnet1DefaultRoute10708846);
    vpcPublicSubnet1NatGateway9C16659e.addDependency(vpcPublicSubnet1RouteTableAssociation5D3f4579);

    if (vpcPublicSubnet2DefaultRouteA1ec0f60 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2DefaultRouteA1ec0f60' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Eip9b3743b1 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Eip9b3743b1' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2RouteTableAssociation21F81b59 == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2RouteTableAssociation21F81b59' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2Subnet009B674f == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2Subnet009B674f' to be undefined. Fixit.`); }
    const vpcPublicSubnet2NatGateway9B8ae11a = new ec2.CfnNatGateway(this, 'vpcPublicSubnet2NATGateway9B8AE11A', {
      allocationId: vpcPublicSubnet2Eip9b3743b1.attrAllocationId,
      subnetId: vpcPublicSubnet2Subnet009B674f.ref,
      tags: [
        {
          key: 'Name',
          value: 'aws-cdk-rds-proxy/vpc/PublicSubnet2',
        },
      ],
    });
    vpcPublicSubnet2NatGateway9B8ae11a.addDependency(vpcPublicSubnet2DefaultRouteA1ec0f60);
    vpcPublicSubnet2NatGateway9B8ae11a.addDependency(vpcPublicSubnet2RouteTableAssociation21F81b59);

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterSecretCea6d7b6 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretCea6d7b6' to be undefined. Fixit.`); }
    const dbClusterSecretAttachmentAb67a752 = new secretsmanager.CfnSecretTargetAttachment(this, 'dbClusterSecretAttachmentAB67A752', {
      secretId: dbClusterSecretCea6d7b6.ref,
      targetId: dbClusterE86e47ae.ref,
      targetType: 'AWS::RDS::DBCluster',
    });

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterProxy2ProxySecurityGroupB44507ae == null) { throw new Error(`A combination of conditions caused 'dbClusterProxy2ProxySecurityGroupB44507ae' to be undefined. Fixit.`); }
    if (dbClusterSecurityGroupCaa1a91f == null) { throw new Error(`A combination of conditions caused 'dbClusterSecurityGroupCaa1a91f' to be undefined. Fixit.`); }
    const dbClusterSecurityGroupfromawscdkrdsproxydbClusterProxy2ProxySecurityGroup5B77853fIndirectPort61009070 = new ec2.CfnSecurityGroupIngress(this, 'dbClusterSecurityGroupfromawscdkrdsproxydbClusterProxy2ProxySecurityGroup5B77853FIndirectPort61009070', {
      description: 'Allow connections to the database Cluster from the Proxy',
      fromPort: dbClusterE86e47ae.attrEndpointPort,
      groupId: dbClusterSecurityGroupCaa1a91f.attrGroupId,
      ipProtocol: 'tcp',
      sourceSecurityGroupId: dbClusterProxy2ProxySecurityGroupB44507ae.attrGroupId,
      toPort: dbClusterE86e47ae.attrEndpointPort,
    });

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterProxyProxySecurityGroup170F327d == null) { throw new Error(`A combination of conditions caused 'dbClusterProxyProxySecurityGroup170F327d' to be undefined. Fixit.`); }
    if (dbClusterSecurityGroupCaa1a91f == null) { throw new Error(`A combination of conditions caused 'dbClusterSecurityGroupCaa1a91f' to be undefined. Fixit.`); }
    const dbClusterSecurityGroupfromawscdkrdsproxydbClusterProxyProxySecurityGroupFbc47b09IndirectPort152B2d99 = new ec2.CfnSecurityGroupIngress(this, 'dbClusterSecurityGroupfromawscdkrdsproxydbClusterProxyProxySecurityGroupFBC47B09IndirectPort152B2D99', {
      description: 'Allow connections to the database Cluster from the Proxy',
      fromPort: dbClusterE86e47ae.attrEndpointPort,
      groupId: dbClusterSecurityGroupCaa1a91f.attrGroupId,
      ipProtocol: 'tcp',
      sourceSecurityGroupId: dbClusterProxyProxySecurityGroup170F327d.attrGroupId,
      toPort: dbClusterE86e47ae.attrEndpointPort,
    });

    if (dbInstance4076B1ec == null) { throw new Error(`A combination of conditions caused 'dbInstance4076B1ec' to be undefined. Fixit.`); }
    if (dbInstanceSecret032D3661 == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecret032D3661' to be undefined. Fixit.`); }
    const dbInstanceSecretAttachment88Cfbdae = new secretsmanager.CfnSecretTargetAttachment(this, 'dbInstanceSecretAttachment88CFBDAE', {
      secretId: dbInstanceSecret032D3661.ref,
      targetId: dbInstance4076B1ec.ref,
      targetType: 'AWS::RDS::DBInstance',
    });

    if (dbInstance4076B1ec == null) { throw new Error(`A combination of conditions caused 'dbInstance4076B1ec' to be undefined. Fixit.`); }
    if (dbInstanceSecurityGroupA58a00a3 == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecurityGroupA58a00a3' to be undefined. Fixit.`); }
    if (dbProxyProxySecurityGroup16E727a7 == null) { throw new Error(`A combination of conditions caused 'dbProxyProxySecurityGroup16E727a7' to be undefined. Fixit.`); }
    const dbInstanceSecurityGroupfromawscdkrdsproxydbProxyProxySecurityGroupA345afe5IndirectPortE3621d4f = new ec2.CfnSecurityGroupIngress(this, 'dbInstanceSecurityGroupfromawscdkrdsproxydbProxyProxySecurityGroupA345AFE5IndirectPortE3621D4F', {
      description: 'Allow connections to the database Instance from the Proxy',
      fromPort: dbInstance4076B1ec.attrEndpointPort,
      groupId: dbInstanceSecurityGroupA58a00a3.attrGroupId,
      ipProtocol: 'tcp',
      sourceSecurityGroupId: dbProxyProxySecurityGroup16E727a7.attrGroupId,
      toPort: dbInstance4076B1ec.attrEndpointPort,
    });

    if (vpcPrivateSubnet1RouteTableB41a48cc == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableB41a48cc' to be undefined. Fixit.`); }
    if (vpcPublicSubnet1NatGateway9C16659e == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet1NatGateway9C16659e' to be undefined. Fixit.`); }
    const vpcPrivateSubnet1DefaultRoute1Aa8e2e5 = new ec2.CfnRoute(this, 'vpcPrivateSubnet1DefaultRoute1AA8E2E5', {
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet1NatGateway9C16659e.ref,
      routeTableId: vpcPrivateSubnet1RouteTableB41a48cc.ref,
    });

    if (vpcPrivateSubnet2RouteTable7280F23e == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTable7280F23e' to be undefined. Fixit.`); }
    if (vpcPublicSubnet2NatGateway9B8ae11a == null) { throw new Error(`A combination of conditions caused 'vpcPublicSubnet2NatGateway9B8ae11a' to be undefined. Fixit.`); }
    const vpcPrivateSubnet2DefaultRouteB0e07f99 = new ec2.CfnRoute(this, 'vpcPrivateSubnet2DefaultRouteB0E07F99', {
      destinationCidrBlock: '0.0.0.0/0',
      natGatewayId: vpcPublicSubnet2NatGateway9B8ae11a.ref,
      routeTableId: vpcPrivateSubnet2RouteTable7280F23e.ref,
    });

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterSubnets03B9b0e1 == null) { throw new Error(`A combination of conditions caused 'dbClusterSubnets03B9b0e1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRoute1Aa8e2e5 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRoute1Aa8e2e5' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation67945127 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation67945127' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteB0e07f99 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteB0e07f99' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation007E94d3 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation007E94d3' to be undefined. Fixit.`); }
    const dbClusterInstance1Bce092ac = new rds.CfnDBInstance(this, 'dbClusterInstance1BCE092AC', {
      dbClusterIdentifier: dbClusterE86e47ae.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: dbClusterSubnets03B9b0e1.ref,
      engine: 'aurora-postgresql',
    });
    dbClusterInstance1Bce092ac.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    dbClusterInstance1Bce092ac.addDependency(vpcPrivateSubnet1DefaultRoute1Aa8e2e5);
    dbClusterInstance1Bce092ac.addDependency(vpcPrivateSubnet1RouteTableAssociation67945127);
    dbClusterInstance1Bce092ac.addDependency(vpcPrivateSubnet2DefaultRouteB0e07f99);
    dbClusterInstance1Bce092ac.addDependency(vpcPrivateSubnet2RouteTableAssociation007E94d3);

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterSubnets03B9b0e1 == null) { throw new Error(`A combination of conditions caused 'dbClusterSubnets03B9b0e1' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1DefaultRoute1Aa8e2e5 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1DefaultRoute1Aa8e2e5' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1RouteTableAssociation67945127 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1RouteTableAssociation67945127' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2DefaultRouteB0e07f99 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2DefaultRouteB0e07f99' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2RouteTableAssociation007E94d3 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2RouteTableAssociation007E94d3' to be undefined. Fixit.`); }
    const dbClusterInstance20Ba1ecd9 = new rds.CfnDBInstance(this, 'dbClusterInstance20BA1ECD9', {
      dbClusterIdentifier: dbClusterE86e47ae.ref,
      dbInstanceClass: 'db.t3.medium',
      dbSubnetGroupName: dbClusterSubnets03B9b0e1.ref,
      engine: 'aurora-postgresql',
    });
    dbClusterInstance20Ba1ecd9.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.DELETE;
    dbClusterInstance20Ba1ecd9.addDependency(vpcPrivateSubnet1DefaultRoute1Aa8e2e5);
    dbClusterInstance20Ba1ecd9.addDependency(vpcPrivateSubnet1RouteTableAssociation67945127);
    dbClusterInstance20Ba1ecd9.addDependency(vpcPrivateSubnet2DefaultRouteB0e07f99);
    dbClusterInstance20Ba1ecd9.addDependency(vpcPrivateSubnet2RouteTableAssociation007E94d3);

    if (dbClusterProxy2IamRole190D217c == null) { throw new Error(`A combination of conditions caused 'dbClusterProxy2IamRole190D217c' to be undefined. Fixit.`); }
    if (dbClusterProxy2ProxySecurityGroupB44507ae == null) { throw new Error(`A combination of conditions caused 'dbClusterProxy2ProxySecurityGroupB44507ae' to be undefined. Fixit.`); }
    if (dbClusterSecretAttachmentAb67a752 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretAttachmentAb67a752' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbClusterProxy28Bbd43d5 = new rds.CfnDBProxy(this, 'dbClusterProxy28BBD43D5', {
      auth: [
        {
          authScheme: 'SECRETS',
          iamAuth: 'DISABLED',
          secretArn: dbClusterSecretAttachmentAb67a752.ref,
        },
      ],
      dbProxyName: 'awscdkrdsproxydbClusterProxy27493E9A7',
      engineFamily: 'POSTGRESQL',
      requireTls: true,
      roleArn: dbClusterProxy2IamRole190D217c.attrArn,
      vpcSecurityGroupIds: [
        dbClusterProxy2ProxySecurityGroupB44507ae.attrGroupId,
      ],
      vpcSubnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (dbClusterProxy2IamRole190D217c == null) { throw new Error(`A combination of conditions caused 'dbClusterProxy2IamRole190D217c' to be undefined. Fixit.`); }
    if (dbClusterSecretAttachmentAb67a752 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretAttachmentAb67a752' to be undefined. Fixit.`); }
    const dbClusterProxy2IamRoleDefaultPolicyFd9414d8 = new iam.CfnPolicy(this, 'dbClusterProxy2IAMRoleDefaultPolicyFD9414D8', {
      policyDocument: {
        Statement: [
          {
            Action: [
              'secretsmanager:DescribeSecret',
              'secretsmanager:GetSecretValue',
            ],
            Effect: 'Allow',
            Resource: dbClusterSecretAttachmentAb67a752.ref,
          },
        ],
        Version: '2012-10-17',
      },
      policyName: 'dbClusterProxy2IAMRoleDefaultPolicyFD9414D8',
      roles: [
        dbClusterProxy2IamRole190D217c.ref,
      ],
    });

    if (dbClusterProxyIamRole693E39f5 == null) { throw new Error(`A combination of conditions caused 'dbClusterProxyIamRole693E39f5' to be undefined. Fixit.`); }
    if (dbClusterProxyProxySecurityGroup170F327d == null) { throw new Error(`A combination of conditions caused 'dbClusterProxyProxySecurityGroup170F327d' to be undefined. Fixit.`); }
    if (dbClusterSecretAttachmentAb67a752 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretAttachmentAb67a752' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbClusterProxyAb5f8181 = new rds.CfnDBProxy(this, 'dbClusterProxyAB5F8181', {
      auth: [
        {
          authScheme: 'SECRETS',
          iamAuth: 'DISABLED',
          secretArn: dbClusterSecretAttachmentAb67a752.ref,
        },
      ],
      dbProxyName: 'awscdkrdsproxydbClusterProxyE88930B6',
      engineFamily: 'POSTGRESQL',
      requireTls: true,
      roleArn: dbClusterProxyIamRole693E39f5.attrArn,
      vpcSecurityGroupIds: [
        dbClusterProxyProxySecurityGroup170F327d.attrGroupId,
      ],
      vpcSubnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (dbClusterProxyIamRole693E39f5 == null) { throw new Error(`A combination of conditions caused 'dbClusterProxyIamRole693E39f5' to be undefined. Fixit.`); }
    if (dbClusterSecretAttachmentAb67a752 == null) { throw new Error(`A combination of conditions caused 'dbClusterSecretAttachmentAb67a752' to be undefined. Fixit.`); }
    const dbClusterProxyIamRoleDefaultPolicyEee23224 = new iam.CfnPolicy(this, 'dbClusterProxyIAMRoleDefaultPolicyEEE23224', {
      policyDocument: {
        Statement: [
          {
            Action: [
              'secretsmanager:DescribeSecret',
              'secretsmanager:GetSecretValue',
            ],
            Effect: 'Allow',
            Resource: dbClusterSecretAttachmentAb67a752.ref,
          },
        ],
        Version: '2012-10-17',
      },
      policyName: 'dbClusterProxyIAMRoleDefaultPolicyEEE23224',
      roles: [
        dbClusterProxyIamRole693E39f5.ref,
      ],
    });

    if (dbInstanceSecretAttachment88Cfbdae == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecretAttachment88Cfbdae' to be undefined. Fixit.`); }
    if (dbProxyIamRole662F3ab8 == null) { throw new Error(`A combination of conditions caused 'dbProxyIamRole662F3ab8' to be undefined. Fixit.`); }
    if (dbProxyProxySecurityGroup16E727a7 == null) { throw new Error(`A combination of conditions caused 'dbProxyProxySecurityGroup16E727a7' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet1Subnet934893E8 == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet1Subnet934893E8' to be undefined. Fixit.`); }
    if (vpcPrivateSubnet2Subnet7031C2ba == null) { throw new Error(`A combination of conditions caused 'vpcPrivateSubnet2Subnet7031C2ba' to be undefined. Fixit.`); }
    const dbProxy3B89eaf2 = new rds.CfnDBProxy(this, 'dbProxy3B89EAF2', {
      auth: [
        {
          authScheme: 'SECRETS',
          iamAuth: 'DISABLED',
          secretArn: dbInstanceSecretAttachment88Cfbdae.ref,
        },
      ],
      dbProxyName: 'awscdkrdsproxydbProxy0E60A1B7',
      engineFamily: 'POSTGRESQL',
      requireTls: true,
      roleArn: dbProxyIamRole662F3ab8.attrArn,
      vpcSecurityGroupIds: [
        dbProxyProxySecurityGroup16E727a7.attrGroupId,
      ],
      vpcSubnetIds: [
        vpcPrivateSubnet1Subnet934893E8.ref,
        vpcPrivateSubnet2Subnet7031C2ba.ref,
      ],
    });

    if (dbInstanceSecretAttachment88Cfbdae == null) { throw new Error(`A combination of conditions caused 'dbInstanceSecretAttachment88Cfbdae' to be undefined. Fixit.`); }
    if (dbProxyIamRole662F3ab8 == null) { throw new Error(`A combination of conditions caused 'dbProxyIamRole662F3ab8' to be undefined. Fixit.`); }
    const dbProxyIamRoleDefaultPolicy99Ab98f3 = new iam.CfnPolicy(this, 'dbProxyIAMRoleDefaultPolicy99AB98F3', {
      policyDocument: {
        Statement: [
          {
            Action: [
              'secretsmanager:DescribeSecret',
              'secretsmanager:GetSecretValue',
            ],
            Effect: 'Allow',
            Resource: dbInstanceSecretAttachment88Cfbdae.ref,
          },
        ],
        Version: '2012-10-17',
      },
      policyName: 'dbProxyIAMRoleDefaultPolicy99AB98F3',
      roles: [
        dbProxyIamRole662F3ab8.ref,
      ],
    });

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterInstance1Bce092ac == null) { throw new Error(`A combination of conditions caused 'dbClusterInstance1Bce092ac' to be undefined. Fixit.`); }
    if (dbClusterInstance20Ba1ecd9 == null) { throw new Error(`A combination of conditions caused 'dbClusterInstance20Ba1ecd9' to be undefined. Fixit.`); }
    if (dbClusterProxy28Bbd43d5 == null) { throw new Error(`A combination of conditions caused 'dbClusterProxy28Bbd43d5' to be undefined. Fixit.`); }
    const dbClusterProxy2ProxyTargetGroup8Bd48f57 = new rds.CfnDBProxyTargetGroup(this, 'dbClusterProxy2ProxyTargetGroup8BD48F57', {
      connectionPoolConfigurationInfo: {
      },
      dbClusterIdentifiers: [
        dbClusterE86e47ae.ref,
      ],
      dbProxyName: dbClusterProxy28Bbd43d5.ref,
      targetGroupName: 'default',
    });
    dbClusterProxy2ProxyTargetGroup8Bd48f57.addDependency(dbClusterInstance1Bce092ac);
    dbClusterProxy2ProxyTargetGroup8Bd48f57.addDependency(dbClusterInstance20Ba1ecd9);
    dbClusterProxy2ProxyTargetGroup8Bd48f57.addDependency(dbClusterE86e47ae);

    if (dbClusterE86e47ae == null) { throw new Error(`A combination of conditions caused 'dbClusterE86e47ae' to be undefined. Fixit.`); }
    if (dbClusterInstance1Bce092ac == null) { throw new Error(`A combination of conditions caused 'dbClusterInstance1Bce092ac' to be undefined. Fixit.`); }
    if (dbClusterInstance20Ba1ecd9 == null) { throw new Error(`A combination of conditions caused 'dbClusterInstance20Ba1ecd9' to be undefined. Fixit.`); }
    if (dbClusterProxyAb5f8181 == null) { throw new Error(`A combination of conditions caused 'dbClusterProxyAb5f8181' to be undefined. Fixit.`); }
    const dbClusterProxyProxyTargetGroupB7010c0d = new rds.CfnDBProxyTargetGroup(this, 'dbClusterProxyProxyTargetGroupB7010C0D', {
      connectionPoolConfigurationInfo: {
      },
      dbClusterIdentifiers: [
        dbClusterE86e47ae.ref,
      ],
      dbProxyName: dbClusterProxyAb5f8181.ref,
      targetGroupName: 'default',
    });
    dbClusterProxyProxyTargetGroupB7010c0d.addDependency(dbClusterInstance1Bce092ac);
    dbClusterProxyProxyTargetGroupB7010c0d.addDependency(dbClusterInstance20Ba1ecd9);
    dbClusterProxyProxyTargetGroupB7010c0d.addDependency(dbClusterE86e47ae);

    if (dbInstance4076B1ec == null) { throw new Error(`A combination of conditions caused 'dbInstance4076B1ec' to be undefined. Fixit.`); }
    if (dbProxy3B89eaf2 == null) { throw new Error(`A combination of conditions caused 'dbProxy3B89eaf2' to be undefined. Fixit.`); }
    const dbProxyProxyTargetGroup8Da26a77 = new rds.CfnDBProxyTargetGroup(this, 'dbProxyProxyTargetGroup8DA26A77', {
      connectionPoolConfigurationInfo: {
        connectionBorrowTimeout: 30,
        maxConnectionsPercent: 50,
      },
      dbInstanceIdentifiers: [
        dbInstance4076B1ec.ref,
      ],
      dbProxyName: dbProxy3B89eaf2.ref,
      targetGroupName: 'default',
    });
  }
}

