import * as cdk from 'aws-cdk-lib';
import * as glue from 'aws-cdk-lib/aws-glue';
import * as s3 from 'aws-cdk-lib/aws-s3';

export interface AwsGlueDataQualityRulesetProps extends cdk.StackProps {
  /**
   * Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
   * @default '/cdk-bootstrap/hnb659fds/version'
   */
  readonly bootstrapVersion?: string;
}

export class AwsGlueDataQualityRuleset extends cdk.Stack {
  public constructor(scope: cdk.App, id: string, props: AwsGlueDataQualityRulesetProps = {}) {
    super(scope, id, props);

    // Applying default props
    props = {
      ...props,
      bootstrapVersion: new cdk.CfnParameter(this, 'BootstrapVersion', {
        type: 'AWS::SSM::Parameter::Value<String>',
        default: props.bootstrapVersion?.toString() ?? '/cdk-bootstrap/hnb659fds/version',
        description: 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
      }).valueAsString,
    };

    // Resources
    const dataBucketE3889a50 = new s3.CfnBucket(this, 'DataBucketE3889A50', {
    });
    dataBucketE3889a50.cfnOptions.deletionPolicy = cdk.CfnDeletionPolicy.RETAIN;

    const myDatabase1E2517db = new glue.CfnDatabase(this, 'MyDatabase1E2517DB', {
      catalogId: this.account,
      databaseInput: {
        name: 'my_database',
      },
    });

    if (dataBucketE3889a50 == null) { throw new Error(`A combination of conditions caused 'dataBucketE3889a50' to be undefined. Fixit.`); }
    if (myDatabase1E2517db == null) { throw new Error(`A combination of conditions caused 'myDatabase1E2517db' to be undefined. Fixit.`); }
    const csvTableE499caba = new glue.CfnTable(this, 'CSVTableE499CABA', {
      catalogId: this.account,
      databaseName: myDatabase1E2517db.ref,
      tableInput: {
        description: 'csv_table generated by CDK',
        name: 'csv_table',
        parameters: {
          classification: 'csv',
          'has_encrypted_data': true,
        },
        partitionKeys: [
          {
            name: 'year',
            type: 'smallint',
          },
          {
            name: 'month',
            type: 'bigint',
          },
        ],
        storageDescriptor: {
          columns: [
            {
              name: 'col1',
              type: 'string',
            },
            {
              name: 'col2',
              type: 'string',
            },
            {
              name: 'col3',
              type: 'string',
            },
          ],
          compressed: false,
          inputFormat: 'org.apache.hadoop.mapred.TextInputFormat',
          location: [
            's3://',
            dataBucketE3889a50.ref,
            '/',
          ].join(''),
          outputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',
          serdeInfo: {
            serializationLibrary: 'org.apache.hadoop.hive.serde2.OpenCSVSerde',
          },
          storedAsSubDirectories: false,
        },
        tableType: 'EXTERNAL_TABLE',
      },
    });

    if (csvTableE499caba == null) { throw new Error(`A combination of conditions caused 'csvTableE499caba' to be undefined. Fixit.`); }
    if (myDatabase1E2517db == null) { throw new Error(`A combination of conditions caused 'myDatabase1E2517db' to be undefined. Fixit.`); }
    const dataQualityRulesetBb177adb = new glue.CfnDataQualityRuleset(this, 'DataQualityRulesetBB177ADB', {
      clientToken: 'client_token',
      description: 'my description',
      name: 'my_ruleset',
      ruleset: 'Rules = [RowCount > 10]',
      tags: {
        key1: 'value1',
        key2: 'value2',
      },
      targetTable: {
        databaseName: myDatabase1E2517db.ref,
        tableName: csvTableE499caba.ref,
      },
    });
  }
}

